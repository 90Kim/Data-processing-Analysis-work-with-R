DT[, list(mean(Sepal.Length),
mean(Sepal.Length - Sepal.Width))]
DT[, list(Mean_S.L = mean(Sepal.Length),
Mean_S.L-S.W = mean(Sepal.Length - Sepal.Width))]
DT[, list("Mean_S.L" = mean(Sepal.Length),
"Mean_S.L-S.W" = mean(Sepal.Length - Sepal.Width))]
DT[, mean(Sepal.Length), by = "Species"]
DT[, Mean_Spec = mean(Sepal.Length), by = "Species"]
DT[, .(Mean_Spec = mean(Sepal.Length)), by = "Species"]
DF <- data.frame(x=runif(26000), y=rep(LETTERS, each=10000))
head(DF)
system.time(x <- DF[DF$y=="C"])
system.time(x <- DF[DF$y=="C",])
system.time(x <- DF[DF$y=="C",])
DF <- data.frame(x=runif(26000), y=rep(LETTERS, each=10000))
head(DF)
system.time(x <- DF[DF$y=="C",])
str(DF)
DF <- data.frame(x=runif(26000), y=rep(LETTERS, each=10000))
head(DF)
str(DF)
system.time(x <- DF[DF$y=="C",])
DT <- as.data.table(DF)
setkey(DT, y)
system.time(x <- DT[J("C"), ])
system.time(x <- DT[J("C"), ])
DT[J("C"), mean(x)]
DT[J("C"), mean(data)]
DT[J("C"), mean(data)]
DT[J("C"), mean(y)]
DT[J("C"), mean(x)]
x
DT[J("C"), list(x_mean = mean(x), x_std = sd(x))]
DT[, list(x_mean = mean(x), x_std = sd(x)), keyby = .(x=="C")]
head(DT)
DT1 <- data.table(x = runif(26000), y = rep(LETTERS, each = 10000))
DT2 <- data.table(y = c("A","B","C"), z = c("a","b","c"))
head(DT1)
head(DT2)
setkey(DT1, y)
DT1[DT2,]
setkey(DT2, y)
DT2[DT1,]
library(plyr)
system.time(x <- ldply(1:10000, function(x) {
data.frame(val = x,
val2 = 2*x,
val3 = 2 / x,
val4 = 4*x,
val5 = 4/x)
}))
head(x)
system.time(x <- llply(1:10000, function(x) {
data.frame(val = x,
val2 = 2*x,
val3 = 2 / x,
val4 = 4*x,
val5 = 4/x)
}))
head(x)
x <- lapply(1:10000, function(x) {
data.frame(val = x,
val2 = 2*x,
val3 = 2 / x,
val4 = 4*x,
val5 = 4/x)
})
system.time(y <- do.call(rbind, x))
head(y)
head(x)
install.packages("foreach")
library(foreach)
foreach(i = 1:5) %do% {
return(i)
}
foreach(i = 1:5, .combine = c) %do% {
return(i)
}
foreach(i = 1:5, .combine = rbind) %do% {
return(data.frame(val = i))
}
a <- foreach(i = 1:5, .combine = rbind) %do% {
return(data.frame(val = i))
}
a
a <- foreach(i = 1:5, .combine = rbind) %do% {
return(data.table(val = i))
}
a
(a <- foreach(i = 1:5, .combine = rbind) %do% {
return(data.table(val = i))
})
(a <- foreach(i = 1:5, .combine = cbind) %do% {
return(data.table(val = i))
})
(a <- foreach(i = 1:5, .combine = cbind) %do% {
return(data.frame(val = i))
})
(a <- foreach(i = 1:5, .combine = "+") %do% {
return(data.frame(val = i))
})
(a <- foreach(i = 1:5, .combine = "+") %do% {
return(i)
})
(a <- foreach(i = 1:10, .combine = "+") %do% {
return(i)
})
install.packages("doParallel")
library(doParallel)
registerDoParallel(cores = 4)
library(plyr)
big_data <- data.frame(
value = runif(NROW(LETTERS) * 2000000),
group = rep(LETTERS, 2000000)
)
dlply(big_data, .(group), function(x){
mean(x$value)
}, .parallel = TRUE)
head(big_data)
foreach(i = 1:800000) %dopar% {
mean(big_data$value + i)
}
rm(list=ls())
gc()
source('~/R/Data processing & Analysis work with R/code/ch05.R', encoding = 'UTF-8')
rm(list=ls())
gc()
install.packages("testthat")
library(testthat)
a <- 1:3
b <- 1:3
expect_equal(a,b)
expect_equivalent(a, b)
names(a) <- c('a','b','c')
expect_equal(a,b)
expect_equivalent(a, b)
a
b
methods("plot")
install.packages("mlbench")
library(mlbench)
data("Ozone")
rm(list=ls())
gc()
data("Ozone")
plot(Ozone$V8, Ozone$V9)
plot(Ozone$V8, Ozone$V9, xlab = "Sandburg Temperature", ylab = "EL Monte Temperature")
plot(Ozone$V8, Ozone$V9, xlab = "Sandburg Temperature", ylab = "EL Monte Temperature",
main = "Ozone")
plot(Ozone$V8, Ozone$V9, xlab = "Sandburg Temperature", ylab = "EL Monte Temperature",
main = "Ozone", pch = 20)
plot(Ozone$V8, Ozone$V9, xlab = "Sandburg Temperature", ylab = "EL Monte Temperature",
main = "Ozone", pch = 10)
plot(Ozone$V8, Ozone$V9, xlab = "Sandburg Temperature", ylab = "EL Monte Temperature",
main = "Ozone", pch = 5)
plot(Ozone$V8, Ozone$V9, xlab = "Sandburg Temperature", ylab = "EL Monte Temperature",
main = "Ozone", pch = 1)
plot(Ozone$V8, Ozone$V9, xlab = "Sandburg Temperature", ylab = "EL Monte Temperature",
main = "Ozone", pch = "+")
plot(Ozone$V8, Ozone$V9, xlab = "Sandburg Temperature", ylab = "EL Monte Temperature",
main = "Ozone", pch = 20)
plot(Ozone$V8, Ozone$V9, xlab = "Sandburg Temperature", ylab = "EL Monte Temperature",
main = "Ozone", pch = 20, cex = .1)
plot(Ozone$V8, Ozone$V9, xlab = "Sandburg Temperature", ylab = "EL Monte Temperature",
main = "Ozone", pch = 20, cex = .5)
plot(Ozone$V8, Ozone$V9, xlab = "Sandburg Temperature", ylab = "EL Monte Temperature",
main = "Ozone", pch = 20)
plot(Ozone$V8, Ozone$V9, xlab = "Sandburg Temperature", ylab = "EL Monte Temperature",
main = "Ozone", pch = 20, cex = 2)
plot(Ozone$V8, Ozone$V9, xlab = "Sandburg Temperature", ylab = "EL Monte Temperature",
main = "Ozone", pch = 20, col = "blue")
?par
plot(Ozone$V8, Ozone$V9, xlab = "Sandburg Temperature", ylab = "EL Monte Temperature",
main = "Ozone", pch = 20, col = "blue", col.axis = "red")
plot(Ozone$V8, Ozone$V9, xlab = "Sandburg Temperature", ylab = "EL Monte Temperature",
main = "Ozone", pch = 20, col = "blue", col.axis = "red", col.lab = "yellow")
plot(Ozone$V8, Ozone$V9, xlab = "Sandburg Temperature", ylab = "EL Monte Temperature",
main = "Ozone", pch = 20, col = "blue", col.axis = "red",
xlim = c(0,100), ylim = c(0,90))
plot(Ozone$V8, Ozone$V9, xlab = "Sandburg Temperature", ylab = "EL Monte Temperature",
main = "Ozone", pch = 20, col = "blue", col.axis = "red",
xlim = c(20,100), ylim = c(20,90))
data(cars)
head(cars)
plot(cars)
plot(cars, type = "l")
plot(cars, type = "b")
plot(cars, type = "o")
tapply(cars$dist, cars$speed, mean)
plot(tapply(cars$dist, cars$speed, mean), type = "o")
plot(tapply(cars$dist, cars$speed, mean), type = "o", xlab = "speed", ylab = "dist")
plot(tapply(cars$dist, cars$speed, mean), type = "o", xlab = "speed", ylab = "dist",
lty = "dashed")
plot(tapply(cars$dist, cars$speed, mean), type = "o", xlab = "speed", ylab = "dist",
lty = "solid")
plot(tapply(cars$dist, cars$speed, mean), type = "o", xlab = "speed", ylab = "dist",
lty = "blank")
plot(tapply(cars$dist, cars$speed, mean), type = "o", xlab = "speed", ylab = "dist",
lty = "dotted")
plot(tapply(cars$dist, cars$speed, mean), type = "o", xlab = "speed", ylab = "dist",
lty = "dotdash")
plot(tapply(cars$dist, cars$speed, mean), type = "o", xlab = "speed", ylab = "dist",
lty = "longdash")
plot(tapply(cars$dist, cars$speed, mean), type = "o", xlab = "speed", ylab = "dist",
lty = "twodash")
opar <- par(mfrow = c(1,2))
plot(Ozone$V8, Ozone$V9, xlab = "Sandburg Temperature", ylab = "EL Monte Temperature",
main = "Ozone", pch = 20, col = "blue", col.axis = "red",
xlim = c(20,100), ylim = c(20,90))
plot(Ozone$V8, Ozone$V9, xlab = "Sandburg Temperature", ylab = "EL Monte Temperature",
main = "Ozone2", pch = 20, col = "blue", col.axis = "red",
xlim = c(20,100), ylim = c(20,90))
par(opar)
opar <- par(mfrow = c(1,2))
plot(Ozone$V8, Ozone$V9, xlab = "Sandburg Temperature", ylab = "EL Monte Temperature",
main = "Ozone", pch = 20, col = "blue", col.axis = "red",
xlim = c(20,100), ylim = c(20,90))
plot(Ozone$V8, Ozone$V9, xlab = "Sandburg Temperature", ylab = "EL Monte Temperature",
main = "Ozone2", pch = 20, col = "blue", col.axis = "red",
xlim = c(20,100), ylim = c(20,90))
source('~/R/Data processing & Analysis work with R/code/ch06.R', encoding = 'UTF-8', echo=TRUE)
head(Ozone[,c("V6","V7")])
plot(Ozone$V6, Ozone$V7, xlab = "Windspeed", ylab = "Humidity",
main = "Ozone", pch = 20, cex = 0.5)
plot(jitter(Ozone$V6), jitter(Ozone$V7), xlab = "Windspeed", ylab = "Humidity",
main = "Ozone", pch = 20, cex = 0.5)
data("iris")
plot(iris$Sepal.Width, iris$Sepal.Length, cex=0.5, pch=20,
xlab = "Width", ylab = "Length", main = "iris")
points(iris$Sepal.Width, iris$Sepal.Length, cex=1, pch="+", col="red")
plot(iris$Sepal.Width, iris$Sepal.Length, cex=0.5, pch=20,
xlab = "Width", ylab = "Length", main = "iris")
points(iris$Petal.Width, iris$Petal.Length, cex=0.5, pch="+", col="red")
with(iris, {
plot(NULL, xlim = c(0,5), ylim = c(0,10), xlab = "width", ylab = "length",
main = "iris", type = "n")
points(Sepal.Width, Sepal.Length, cex = 0.5, pch = 20)
points(Petal.Width, Petal.Length, cex = 0.5, pch = "+", col = "blue")
})
x <- seq(0, 2*pi, 0.1)
y <- sin(x)
plot(x, y, cex = 0.5, col = "red")
lines(x, y)
data(cars)
head(cars)
plot(cars)
lines(lowess(cars))
lines(loess(cars))
lines(loess(cars), col = "red")
lines(ksmooth(cars), col = "blue")
lines(ksmooth(cars))
str(cars)
lines(ksmooth(cars))
lines(smooth.spline(cars), col = "blue")
lines(earth(cars), col = "green")
plote(cars, xlim = c(0.25))
plot(cars, xlim = c(0.25))
plot(cars, xlim = c(0,25))
abline(a = -5, b = 3.5, col = "red")
abline(mean(cars$dist), lty=2, col = "blue")
abline(h = mean(cars$dist), lty=2, col = "blue")
abline(v = mean(cars$speed), lty=2, col = "blue")
curve(sin, 0, 2*pi)
m <- lm(dist = speed, data = cars)
m <- lm(dist ~ speed, data = cars)
m
plot(cars)
abline(m)
p <- predict.lm(m, interval = "confidence")
head(p)
x <- c(cars$speed, tail(cars$speed, 1), rev(cars$speed), cars$speed[1])
x
y <- c(p[,"lwr"], tail(p[,"upr"], rev(p[,"upr"]), p[,"lwr"][1]))
y <- c(p[,"lwr"], tail(p[,"upr"], 1) rev(p[,"upr"]), p[,"lwr"][1]))
y <- c(p[,"lwr"], tail(p[,"upr"], 1) rev(p[,"upr"]), p[,"lwr"][1])
y <- c(p[,"lwr"], tail(p[,"upr"], 1), rev(p[,"upr"]), p[,"lwr"][1])
y
plot(cars)
abline(m)
polygon(x, y, col = rgb(0.7, 0.7, 0.7, 0.5))
text(cars$speed, cars$dist, pos = 4)
identify(cars$speed, cars$dist)
data(cars)
plot(cars)
identify(cars$speed, cars$dist)
identify(cars$speed, cars$dist)
identify(cars$speed, cars$dist)
points(Petal.Width, Petal.Length, cex = 0.5, pch = "+", col = "blue")
data(iris)
with(iris, {
plot(NULL, xlim = c(0,5), ylim = c(0,10), xlab = "width", ylab = "length",
main = "iris", type = "n")
points(Sepal.Width, Sepal.Length, cex = 0.5, pch = 20)
points(Petal.Width, Petal.Length, cex = 0.5, pch = "+", col = "blue")
})
legend("topright", legend = c("Sepal","Petal"),
pch = c(20, 43), col = c("black","red"), bg = "grey")
points(Petal.Width, Petal.Length, cex = 0.5, pch = "+", col = "red")
with(iris, {
plot(NULL, xlim = c(0,5), ylim = c(0,10), xlab = "width", ylab = "length",
main = "iris", type = "n")
points(Sepal.Width, Sepal.Length, cex = 0.5, pch = 20)
points(Petal.Width, Petal.Length, cex = 0.5, pch = "+", col = "red")
})
legend("topright", legend = c("Sepal","Petal"),
pch = c(20, 43), col = c("black","red"), bg = "grey")
x <- seq(-2*pi, 2*pi, 0.0.1)
x <- seq(-2*pi, 2*pi, 0.01)
y <- matrix(c(cos(x),sin(x)), ncol = 2)
matplot(x, y, lty = c("solid","dashed"), cex = 0.2, type = "l")
abline(h=0, v=0)
boxplot(iris$Sepal.Length)
boxplot(iris$Sepal.Width)
boxstats <- boxplot(iris$Sepal.Width)
boxstats <- boxplot(iris$Sepal.Width)
boxstats
boxstats <- boxplot(iris$Sepal.Width, horizontal = TRUE)
text(boxstats$out, rep(1, NROW(boxstats$out)), labels = boxstats$out, pos = c(1,1,3,1))
boxstats <- boxplot(iris$Sepal.Width, horizontal = TRUE)
text(boxstats$out, rep(1, NROW(boxstats$out)), labels = boxstats$out, pos = c(1,1,1,1))
boxstats <- boxplot(iris$Sepal.Width, horizontal = TRUE)
text(boxstats$out, rep(1, NROW(boxstats$out)), labels = boxstats$out, pos = c(1,1,5,1))
text(boxstats$out, rep(1, NROW(boxstats$out)), labels = boxstats$out, pos = c(1,1,2,1))
text(boxstats$out, rep(1, NROW(boxstats$out)), labels = boxstats$out, pos = c(1,1,4,1))
boxstats <- boxplot(iris$Sepal.Width, horizontal = TRUE)
text(boxstats$out, rep(1, NROW(boxstats$out)), labels = boxstats$out, pos = c(1,1,3,1))
sv <- subset(iris, Species=="Setosa"\Species=="versicolor")
sv <- subset(iris, Species=="Setosa" | Species=="versicolor")
sv$Species <- factor(sv$Species)
boxplot(Sepal.Width ~ Species, data = sv, notch = TRUE)
sv <- subset(iris, Species=="setosa" | Species=="versicolor")
sv$Species <- factor(sv$Species)
sv <- subset(iris, Species=="setosa" | Species=="versicolor")
sv$Species <- factor(sv$Species)
boxplot(Sepal.Width ~ Species, data = sv, notch = TRUE)
sv <- subset(iris, Species=="setosa" | Species=="versicolor")
sv
str(sv)
boxplot(Sepal.Width ~ Species, data = sv, notch = TRUE)
hist(iris$Sepal.Length)
hist(iris$Sepal.Length, freq = FALSE)
plot(density(iris$Sepal.Length))
hist(iris$Sepal.Length, freq = FALSE)
lines(density(iris$Sepal.Length))
plot(density(iris$Sepal.Width))
rug(iris$Sepal.Width)
rug(jitter(iris$Sepal.Width))
tapply(iris$Sepal.Width, iris$Species, mean)
barplot(tapply(iris$Sepal.Width, iris$Species, mean))
cut(1:10, breaks = c(0,5,10))
cut(1:10, breaks = 3)
cut(1:10, breaks = c(1,5,10))
cut(iris$Sepal.Width, breaks = 10)
table(cut(iris$Sepal.Width, breaks = 10))
table(rep(c("a","b","c"), 1:3))
rep(c("a","b","c"), 1:3)
pie(table(cut(iris$Sepal.Width, breaks = 10)))
data("Titanic")
str(Titanic)
head(Titanic)
Titanic
mosaicplot(Titanic, color = TRUE)
mosaicplot(~ class + Survived, data = Titanic, color = TRUE, cex = 1.2)
mosaicplot(~ class + Survived, data = Titanic, color = TRUE, cex = 1.2)
mosaicplot(~ Class + Survived, data = Titanic, color = TRUE, cex = 1.2)
mosaicplot(~ Age + Survived, data = Titanic, color = TRUE, cex = 1.2)
mosaicplot(~ Class + Age + Survived, data = Titanic, color = TRUE, cex = 1.2)
mosaicplot(~ Class + Age, data = Titanic, color = TRUE, cex = 1.2)
pairs(~ Sepal.Width + Sepal.Length + Petal.Width + Petal.Length,
data = iris, pch = c(1,2,3)[iris$Species])
outer(1:5, 1:3, "+")
install.packages("mtvnorm")
library(mtvnorm)
install.packages("mtvnorm")
install.packages("mvtnorm")
library(mvtnorm)
dmvnorm(c(0,0), rep(0,2), diag(2))
x <- seq(-3, 3, 0.1)
x
y <- x
outer(x, y, function(x,y) {dmvnorm(cbind(x,y))})
f <- function(x,y) {dmvnorm(cbind(x,y))}
persp(x, y, outer(x, y, f))
persp(x, y, outer(x, y, f), theta = 30)
persp(x, y, outer(x, y, f), theta = 30, phi = 30)
contour(x, y, outer(x, y, f))
rnorm(100, 0, 10)
rnorm(100, 0, 1)
plot(density(rnorm(10,0,1)))
plot(density(rnorm(100,0,1)))
plot(density(rnorm(1000,0,1)))
plot(density(rnorm(10000,0,1)))
plot(density(rnorm(100000,0,1)))
plot(density(rnorm(1000000,0,1)))
plot(density(rnorm(10000000,0,1)))
plot(density(rnorm(100000000,0,1)))
rm(list=ls())
gc()
rnorm(100, 0, 1)
plot(density(rnorm(10000,0,1)))
summary(1:11)
x <- factor(c("a","b","c","c","c","d","d"))
table(x)
which.max(table(x))
sample(1:10, 5)
sampel(1:10, 5, replace = TRUE)
sample(1:10, 5, replace = TRUE)
sample(1:10, 5, replace = TRUE)
sample(1:10, 5, replace = TRUE, prob = 1:10)
sample(1:10, 5, replace = TRUE, prob = 1:10)
sample(1:10, 5, replace = TRUE, prob = 1:10)
sample(1:10, 5, replace = TRUE, prob = 1:10)
install.packages("sampling")
library(sampling)
x <- strata(c("Species"), size=c(3,3,3), method = "srswor", data = iris)
x
getdata(iris, x)
x <- strata(c("Species"), size=c(3,1,1), method = "srswor", data = iris)
getdata(iris, x)
x <- data.frame(1:10)
(x <- data.frame(1:10))
(x <- data.frame(x=1:10))
install.packages("doBy")
library(doBy)
sampleBy(~1, frac = 0.3, data = x, systematic = TRUE)
sampleBy(~1, frac = 0.2, data = x, systematic = TRUE)
sampleBy(~1, frac = 0.4, data = x, systematic = TRUE)
sampleBy(~1, frac = 0.4, data = x, systematic = FALSE)
sampleBy(~1, frac = 0.4, data = x, systematic = FALSE)
sampleBy(~1, frac = 0.4, data = x, systematic = TRUE)
table(c("a","b","b","c","c","c","d"))
d <- data.frame(x = c("1","2","2","1"),
y = c("A","B","A","B"),
num = c(3,5,8,7))
d
(xtabs(num ~ x+y, data = d))
d2 <- data.frame(x="a","a","a","b","b")
(xtabs(~x, data = d2))
d2
d2 <- data.frame(x=c("a","a","a","b","b"))
(xtabs(~x, data = d2))
(xt <- xtabs(num ~ x+y, data = d))
margin.table(xt, 1)
margin.table(xt, 2)
margin.table(xt)
prop.table(xt, 1)
prop.table(xt, 2)
prop.table(xt)
x <- seq(1,100,0.1)
plot(x, dchisq(x, 6), type = "l")
x <- seq(1,10,0.1)
plot(x, dchisq(x, 6), type = "l")
library(MASS)
data("survey")
str(survey)
head(survey)
xtabs(~ Sex + Exer, data = survey)
chisq.test(xtabs(~ Sex + Exer, data = survey))
xtabs(~ W.Hnd + Clap, data = surveye)
xtabs(~ W.Hnd + Clap, data = survey)
chisq.test(xtabs(~ W.Hnd + Clap, data = survey))
fisher.test(xtabs(~ W.Hnd + Clap, data = survey))
Performance <- matrix(c(794, 86, 150, 570), nrow = 2,
dimnames = list("1st Survey" = c("Approve", "Disapprove"),
"2nd Survey" = c("Approve", "Disapprove")))
Performance
mcnemar.test(Performance)
table(survey$W.Hnd)
chisq.test(table(survey$W.Hnd), p = c(0.3, 0.7))
shapiro.test(rnorm(1000))
x <- rnorm(1000, mean = 10, sd = 1)
qqnorm(x)
qqline(x)
x <- runif(1000)
qqnorm(x)
qqline(x)
qqplot(runif(1000, min = 1, max = 10), 1:10)
cor(iris$Sepal.Length, iris$Sepal.Width)
cor(iris[,1:4])
symnum(cor(iris[,1:4]))
install.packages("corrgram")
library(corrgram)
corrgram(iris, upper.panel = panel.conf)
x <- c(3,4,5,3,2,1,7,5)
rank(sort(x))
m <- matrix(c(1:10, (1:10)^2), ncol = 2)
(m <- matrix(c(1:10, (1:10)^2), ncol = 2))
cor(m, method = "spearman")
cor(m, method = "pearson")
cor(c(1,2,3,4,5),c(1,0,3,4,5), method = "kendall")
cor.test(c(1,2,3,4,5), c(1,0,3,4,5), method = "pearson")
cor.test(c(1,2,3,4,5), c(1,0,3,4,5), method = "spearman")
cor.test(c(1,2,3,4,5), c(1,0,3,4,5), method = "kendall")
x <- rnorom(30)
x <- rnorm(30)
t.test(x)
x <- rnorm(30, mean = 10)
t.test(x)
t.test(x, mu = 10)
sleep
sleep2 <- sleep[,-3]
tapply(sleep2$extra, sleep2$group, mean)
library(doBy)
summaryBy(extra ~ group, sleep2)
var.test(extra ~ group, sleep2)
?t.test()
t.test(extra ~ group, data = sleep2, paired = FALSE, var.equal = TRUE)
with(sleep, t.test(extra[group==1], extra[group==2], paired = TRUE))
with(iris, var.test(Sepal.Width, Sepal.Length))
prop.test(42, 100)
prop.test(c(45,55), c(100,90))
getwd()
